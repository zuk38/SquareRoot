type PlantMetadata
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow nurseries to create, update and delete plants data
      { allow: groups, groups: ["PNs"] }
      # allow all authenticated users to view plants
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view plants
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  category: [PlantCategory] @connection(keyName: "byPlant", fields: ["id"])
  latin_name: String
  norwegian_name: String
  type: String
  native: Boolean
  norwegian_nursery: Boolean
  size_in_cm: Float
  image: String
  featured: Boolean
  climate_zone: String
  #functional requirements
  pollinator_friendly: Boolean
  edible: Boolean
  rain_garden: Boolean
  pet_kids_friendly: Boolean
  air_puryfying: Boolean
  sun_seeker: Boolean #if false then shadow lover
}

type Plant
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow nurseries to create, update and delete plants
      { allow: groups, groups: ["PNs"] }
      # allow all authenticated users to view plants
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view plants
      { allow: public, operations: [read] }
    ]
  )
  @key(name: "plantID", fields: ["id"]) {
  id: ID!
  metadataID: ID!
  metadata: PlantMetadata @connection(fields: ["metadataID"])
  concepts: [ConceptPlant] @connection(keyName: "byPlant", fields: ["id"])
}

type ConceptPlant
  @model(queries: null)
  @key(name: "byPlant", fields: ["plant_id", "concept_id"])
  @key(name: "byConcept", fields: ["concept_id", "plant_id"])
  @auth(
    rules: [
      # allow all authenticated users to view plants inside
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view plants inside
      { allow: public, operations: [read] }
      # only owner can see and edit his project plants
      { allow: owner }
      # allow admins to crud plants in greenspace
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  plant_id: ID!
  concept_id: ID!
  plant: Plant! @connection(fields: ["plant_id"])
  concept: Concept! @connection(fields: ["concept_id"])
  quantity: Float
}

type Concept
  @model(subscriptions: null)
  @key(name: "byGreenspace", fields: ["greenspace_id", "name"])
  @auth(
    rules: [
      # allow admins to create, update and delete greenspaces
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view greenspaces
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view greenspaces
      { allow: public, operations: [read] }
      # allow owner to manipulate the concepts
      { allow: owner }
    ]
  ) {
  id: ID!
  greenspace_id: ID!
  name: String!
  owner: String
  userDefined: Boolean
  image: String
  featured: Boolean
  price: Float
  description: String
  plants: [ConceptPlant] @connection(keyName: "byConcept", fields: ["id"])
  categories: [ConceptCategory] @connection(keyName: "byConcept", fields: ["id"])
}

type Category #rooftop, rainbed, etc.
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  category_name: String!
  header: String
  subheader: String
  plants: [PlantCategory] @connection(keyName: "byCategory", fields: ["id"])
  concepts: [ConceptCategory] @connection(keyName: "byCategory", fields: ["id"])
}

type ConceptCategory  
  @model(queries: null)
  @auth(
    rules: [
      # allow admins to create, update and delete
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view
      { allow: public, operations: [read] }
    ]
  )
  @key(name: "byConcept", fields: ["concept_ID", "category_ID"])
  @key(name: "byCategory", fields: ["category_ID", "concept_ID"]) {
  id: ID!
  concept_ID: ID!
  category_ID: ID!
  concept: Concept! @connection(fields: ["concept_ID"])
  category: Category! @connection(fields: ["category_ID"])
}

type PlantCategory  
  @model(queries: null)
  @auth(
    rules: [
      # allow admins to create, update and delete
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view
      { allow: public, operations: [read] }
    ]
  )
  @key(name: "byPlant", fields: ["plant_ID", "category_ID"])
  @key(name: "byCategory", fields: ["category_ID", "plant_ID"]) {
  id: ID!
  plant_ID: ID!
  category_ID: ID!
  plant: Plant! @connection(fields: ["plant_ID"])
  category: Category! @connection(fields: ["category_ID"])
}

type Greenspace
  @model(subscriptions: null)
  @key(name: "byProject", fields: ["project_ID", "name"])
  @auth(
    rules: [
      # allow admins to create, update and delete greenspaces
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view greenspaces
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view greenspaces
      { allow: public, operations: [read] }
      # allow owners to create, update and delete greenspaces
      { allow: owner }
    ]
  ) {
  id: ID!
  project_ID: ID!
  name: String!
  description: String
  owner: String
  concepts: [Concept] @connection(keyName: "byGreenspace", fields: ["id"])
}

type Project
  @model
  @auth(
    rules: [
      # allow owners of the project to create, update and delete their projects
      { allow: owner }
    ]
  ) {
  id: ID!
  name: String!
  address: String!
  city: String!
  postalCode: String!
  end_date: String
  owner: String
  greenspaces: [Greenspace] @connection(keyName: "byProject", fields: ["id"])
  members: [ProjectMember] @connection(keyName: "byProject", fields: ["id"]) 
}

type ProjectMember
@model(queries: null)
@auth(
    rules: [
      # allow admins to create, update and delete
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view
      { allow: public, operations: [read] }
    ]
  )
@key(name: "byProject", fields: ["project_ID", "member_ID"])  
@key(name: "byMember", fields: ["member_ID", "project_ID"]) {
  id: ID!
  project_ID: ID!
  member_ID: ID!
  project: Project! @connection(fields: ["project_ID"])
  member: Member! @connection(fields: ["member_ID"])
}

type Member
  @auth(
    rules: [
      # allow admins to create, update and delete
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view
      { allow: public, operations: [read] }
    ]
  )
  @model {
  id: ID!
  username: String! #cognito ID
  role: String! #cognito custom:role
  projects: [ProjectMember] @connection(keyName: "byMember", fields: ["id"])
}

#------------------------------------------------------------------------------------------------------

#type Order
# @key(name:"orderID", fields:["id"])
#{

#   id: ID!
#  greenspace_ordered: Greenspace @connection(fields:["id"])
#  ordered_by_group: ProjectGroup @connection(fields:["id"])
#  order_placed: String
#  order_price: Int
#}

#type PlantNursery
# @key(name:"nurseryID", fields:["id"])
# {

#  id: ID!
#  nursery_name: String!
#  nursery_email: String
#  nursery_number: Int
#}

#type BillingCompany
#@key(name:"billingCompanyID", fields:["id"])
#{
#  company_name: String!
#  company_groupID: ProjectGroup @connection(fields:["id"])
#  billing_email: String!
#}
